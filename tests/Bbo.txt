
		for this first part of the test, we fix AX_EMIGRATION, MAX_IMMIGRATION, MAX_MUTATION
		(see the time.py), and play on the iterations and population size.
	
POPULATION:: 50    ITERATION:: 100
159.9194444444444
POPULATION:: 50    ITERATION:: 200
156.06944444444443

POPULATION:: 50    ITERATION:: 400
156.11666666666665

POPULATION:: 50    ITERATION:: 600
158.36944444444444

POPULATION:: 50    ITERATION:: 800
157.84444444444443

POPULATION:: 50    ITERATION:: 1000
156.7861111111111

----------------
POPULATION:: 100    ITERATION:: 100
159.04444444444448

POPULATION:: 100    ITERATION:: 200
157.88888888888889

POPULATION:: 100    ITERATION:: 400
156.7222222222222

POPULATION:: 100    ITERATION:: 600
155.76111111111112

POPULATION:: 100    ITERATION:: 800
153.26388888888889

POPULATION:: 100    ITERATION:: 1000
155.575

----------------
POPULATION:: 150    ITERATION:: 100
157.80277777777775

POPULATION:: 150    ITERATION:: 200
156.6638888888889

POPULATION:: 150    ITERATION:: 400
157.4083333333333

POPULATION:: 150    ITERATION:: 600
158.01388888888886

POPULATION:: 150    ITERATION:: 800
155.33055555555552

POPULATION:: 150    ITERATION:: 1000
155.34722222222223

----------------
POPULATION:: 200    ITERATION:: 100
154.67777777777775

POPULATION:: 200    ITERATION:: 200
157.67500000000004

POPULATION:: 200    ITERATION:: 400
155.51944444444445

POPULATION:: 200    ITERATION:: 600
155.03055555555554

POPULATION:: 200    ITERATION:: 800
154.38333333333333

POPULATION:: 200    ITERATION:: 1000
156.47222222222223

#######################################################################################
 ######################################################################################



	POPULATION = 50
	ITERATIONS = 150
	
	They are fixed.
	we change only immigration, mutation, emigration.
	 


**       Our solution:: 

{'solution': [(7, 1), (2, 1), (8, 1), (11, 1), (3, 2), (5, 2), (11, 2), (10, 2), (1, 2), (7, 3), (5, 3), (1, 3), (10, 3), (4, 3), (6, 4), (3, 4), (8, 4), (5, 4), (4, 4), (9, 5), (11, 5), (5, 5), (7, 5), (4, 5), (10, 5), (8, 5)], 'time': 12.711740986997029, 'fitness': 163.7277777777778}

--------------------------------------------------------------------
**       Our bbo:: 

 161.47222222222223

--------------------------------------------------------------------




                             =====MUTATION=====

MUTATION:: 0.01
 161.9416666666667

MUTATION:: 0.02
 160.4972222222222

MUTATION:: 0.03
 161.06111111111113

MUTATION:: 0.04
 160.67222222222222

MUTATION:: 0.05
 158.05833333333337

MUTATION:: 0.06
 159.90277777777777

MUTATION:: 0.07
 157.71666666666667

MUTATION:: 0.08
 160.3111111111111

MUTATION:: 0.09
 159.91944444444442

MUTATION:: 0.1
 158.39166666666668

----------------

                             =====EMIGRATION=====

EMIGRATION 0.1
 157.70000000000002

EMIGRATION 0.2
 158.06666666666666

EMIGRATION 0.3
 158.74166666666667

EMIGRATION 0.4
 161.8027777777778

EMIGRATION 0.5
 159.98888888888885

EMIGRATION 0.6
 161.67777777777775

EMIGRATION 0.7
 157.6

EMIGRATION 0.8
 158.63333333333333

EMIGRATION 0.9
 160.0361111111111

EMIGRATION 1
 158.63333333333335

----------------

                             =====IMMIGRATION=====

IMMIGRATION 0.1
 159.875

IMMIGRATION 0.2
 159.29444444444445

IMMIGRATION 0.3
 160.9333333333333

IMMIGRATION 0.4
 158.1111111111111

IMMIGRATION 0.5
 158.92499999999998

IMMIGRATION 0.6
 158.6277777777778

IMMIGRATION 0.7
 159.72500000000002

IMMIGRATION 0.8
 159.725

IMMIGRATION 0.9
 160.03055555555554

IMMIGRATION 1
 159.07500000000002